name: Vercel Preview Lighthouse Audit

permissions:
  pull-requests: write
  checks: read
  contents: read
  deployments: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # for second commit

on:
  pull_request:
    types: [synchronize, opened]

jobs:
  generate_lighthouse_audit:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Wait for the Vercel deployment
        uses: patrickedqvist/wait-for-vercel-preview@v1.3.1
        id: wait_for_deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: Preview # Ensure this matches exactly with Vercel's environment name
          max_timeout: 1200

      - name: Add comment to PR
        id: loading_comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: |
            Running Lighthouse audit...

      - name: Audit preview build with Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v11
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
        with:
          urls: |
            ${{ steps.wait_for_deployment.outputs.url }}
          runs: 3 # run 3 times for consistency
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Format Lighthouse score
        id: format_lighthouse_score
        continue-on-error: true
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const results = JSON.parse(`${{ steps.lighthouse_audit.outputs.manifest }}`)
            const representativeResults = results.filter(result => result.isRepresentativeRun)
            const links = JSON.parse(`${{ steps.lighthouse_audit.outputs.links }}`)

            const comment = ['‚ö°Ô∏è Lighthouse Report for the changes in this PR:', ' ']

            for (let i = 0; i < representativeResults.length; i++) {
                const result = representativeResults[i].summary

                const formatResult = (res) => Math.round((res * 100))
                Object.keys(result).forEach(key => result[key] = formatResult(result[key]))
                
                const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥'
                
                comment.push(
                    '---',
                    `Results for [${Object.keys(links)[i]}](${Object.keys(links)[i]}):`,
                    '| Category | Score |',
                    '| --- | --- |',
                    `| ${score(result.performance)} Performance | ${result.performance} |`,
                    `| ${score(result.accessibility)} Accessibility | ${result.accessibility} |`,
                    `| ${score(result['best-practices'])} Best practices | ${result['best-practices']} |`,
                    `| ${score(result.seo)} SEO | ${result.seo} |`,
                    ' ',
                    `*Detailed Report: [Lighthouse report](${Object.values(links)[i]})*`,
                    ' '
                )
            }

            return comment.join('\n')

      - name: Report error to PR
        id: report_error_to_pr
        if: ${{ steps.format_lighthouse_score.outcome != 'success' }}
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: |
            Error while running Lighthouse audit:
            ${{ steps.format_lighthouse_score.outputs.result }}

      - name: Add results to PR
        id: results_to_pr
        if: ${{ steps.format_lighthouse_score.outcome == 'success' }}
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: |
            ${{ steps.format_lighthouse_score.outputs.result }}
