name: Vercel Preview Lighthouse Audit

permissions:
  pull-requests: write
  checks: read
  contents: read
  deployments: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # for second commit

on:
  pull_request:
    types: [synchronize, opened]

jobs:
  generate_lighthouse_audit:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for the Vercel deployment
        uses: patrickedqvist/wait-for-vercel-preview@v1.3.1
        id: wait_for_deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: Preview # Ensure this matches exactly with Vercel's environment name
          max_timeout: 1200

      - name: Add comment to PR
        id: loading_comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: |
            Running Lighthouse audit...

      - name: Audit preview build with Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v11
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
        with:
          urls: |
            ${{ steps.wait_for_deployment.outputs.url }}
          runs: 3 # run 3 times for consistency
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Extract and format Lighthouse details
        id: format_lighthouse_details
        run: |
          # Load the detailed JSON report
          REPORT_PATH=$(find .lighthouseci -name "*.report.json" | head -n 1)
          if [ -f "$REPORT_PATH" ]; then
            REPORT_CONTENT=$(cat "$REPORT_PATH")

            # Parse failing audits and include titles where relevant elements exist
            FAILING_AUDITS=$(echo "$REPORT_CONTENT" | jq -r '.audits | to_entries | map(select(.value.score != 1 and .value.details and .value.details.items)) | map(select(.value.details.items | map(.node.snippet // "No element data") | map(select(. != "No element data")) | length > 0) | ("**" + .value.title + "**: " + .value.description + "\nFailing Elements: \n" + (.value.details.items | map(.node.snippet // "") | join("\n")))) | join("\n\n")')

            # Default message if no issues
            if [ -z "$FAILING_AUDITS" ]; then
              FAILING_AUDITS="No failing accessibility issues detected."
            fi
          else
            FAILING_AUDITS="Lighthouse report not found."
          fi

          # Save the output to a GitHub Actions output variable
          echo "formatted_audits<<EOF" >> $GITHUB_ENV
          echo "$FAILING_AUDITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Add results to PR
        id: results_to_pr
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: |
            丘뫮잺 Lighthouse Report for the changes in this PR:

            | Category | Score |
            | --- | --- |
            | 游릭 Performance | ${{ steps.lighthouse_audit.outputs.performance }} |
            | 游릭 Accessibility | ${{ steps.lighthouse_audit.outputs.accessibility }} |
            | 游릭 Best Practices | ${{ steps.lighthouse_audit.outputs['best-practices'] }} |
            | 游릭 SEO | ${{ steps.lighthouse_audit.outputs.seo }} |

            **Accessibility Failures:**
            ```
            ${{ env.formatted_audits }}
            ```

            *[View Full Report](${{ steps.lighthouse_audit.outputs.links }})*
